service: competitive-analysis

variablesResolutionMode: 20210326

plugins:
  - serverless-prune-plugin
  - serverless-domain-manager
package:
  patterns:
    - '!./**'
    - './bin/**'

provider:
  name: aws
  runtime: go1.x
  profile: uptactics
  memorySize: 128
  region: us-east-1 # US East 1 (N. Virginia)
  stage: ${opt:stage, 'staging'}
  lambdaHashingVersion: "20201221"
  apiGateway:
    shouldStartNameWithService: true
  tracing:
    apiGateway: true
    lambda: true

  iam:
    role:
      statements:
        # Allow all SNS
        - Effect: "Allow"
          Resource: "*"
          Action:
            - sns:*

functions:
  Healthcheck:
    handler: bin/Healthcheck
    events:
      - http:
          path: /Healthcheck
          method: get
          cors: true

  CreateQueryJob:
    handler: bin/CreateQueryJob
    events:
      - http:
          path: /CreateQueryJob
          method: post
          cors: true
    vpc: ${self:custom.vpc}
    environment:
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}

  QueryJobZenserp:
    handler: bin/QueryJobZenserp
    events:
      - sns: ${self:service}-${self:provider.stage}-QueryJobCreated
    timeout: 120
    vpc: ${self:custom.vpc}
    environment:
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
      ZENSERP_API_KEY: ${self:custom.env.ZENSERP_API_KEY}
      ZENSERP_BATCH_WEBHOOK_URL: ${self:custom.env.ZENSERP_BATCH_WEBHOOK_URL}

  ZenserpBatchWebhook:
    handler: bin/ZenserpBatchWebhook
    events:
      - http:
          path: /ZenserpBatchWebhook
          method: post
          cors: true
    timeout: 30
    vpc: ${self:custom.vpc}
    environment:
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
      ZENSERP_API_KEY: ${self:custom.env.ZENSERP_API_KEY}
      ZENSERP_BATCH_WEBHOOK_URL: ${self:custom.env.ZENSERP_BATCH_WEBHOOK_URL}

  ZenserpBatchExtractResults:
    handler: bin/ZenserpBatchExtractResults
    memorySize: 256
    events:
      - sns: ${self:service}-${self:provider.stage}-ZenserpBatchDoneProcessing
    timeout: 120 # 2 minutes timeout to create query items
    vpc: ${self:custom.vpc}
    environment:
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
      ZENSERP_API_KEY: ${self:custom.env.ZENSERP_API_KEY}
      ZENSERP_BATCH_WEBHOOK_URL: ${self:custom.env.ZENSERP_BATCH_WEBHOOK_URL}

  WebScraperParseQueryJobURL:
    handler: bin/WebScraperParseQueryJobURL
    memorySize: 256
    events:
      - sns: ${self:service}-${self:provider.stage}-ParseQueryJobURL
    timeout: 120 # 2 minutes timeout to run analysis from textrazor and save body of query item
    reservedConcurrency: 15 # Added 2 concurrent lambda executions because of the current textrazor plan cap
    vpc: ${self:custom.vpc}
    environment:
      SNS_PREFIX: ${self:custom.env.SNS_PREFIX}
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}
      TEXTRAZOR_API_KEY: ${self:custom.env.TEXTRAZOR_API_KEY}

  CheckCompletedQueryJobs:
    handler: bin/CheckCompletedQueryJobs
    events:
      - sns: ${self:service}-${self:provider.stage}-DoneProcessingQueryJobURL
    reservedConcurrency: 1 # only 1 instance running at a single time to avoid possible race conditions (won't happen anyway since there's db locks)
    vpc: ${self:custom.vpc}
    environment:
      DB_CONN_URL: ${self:custom.env.DB_CONN_URL}

custom:
  env:
    JWT_SECRET: ${ssm:/${self:service}/${self:provider.stage}/JWT_SECRET}
    DB_CONN_URL: ${ssm:/${self:service}/${self:provider.stage}/DB_CONN_URL}
    SNS_PREFIX: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${self:service}-${self:provider.stage}'
    ZENSERP_API_KEY: ${ssm:/${self:service}/${self:provider.stage}/ZENSERP_API_KEY}
    ZENSERP_BATCH_WEBHOOK_URL: ${ssm:/${self:service}/${self:provider.stage}/ZENSERP_BATCH_WEBHOOK_URL}
    TEXTRAZOR_API_KEY: ${ssm:/${self:service}/${self:provider.stage}/TEXTRAZOR_API_KEY}
  vpc:
    securityGroupIds: ${ssm:/uptactics/${self:provider.stage}/DEFAULT_SECURITY_GROUP}
    subnetIds: ${ssm:/uptactics/${self:provider.stage}/PRIVATE_SUBNET_IDS}
  prune:
    automatic: true
    number: 2
  customDomain:
    domainName: ${ssm:/${self:service}/${self:provider.stage}/DOMAIN}
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
